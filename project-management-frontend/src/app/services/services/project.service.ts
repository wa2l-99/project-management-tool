/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignRoleToMember } from '../fn/project/assign-role-to-member';
import { AssignRoleToMember$Params } from '../fn/project/assign-role-to-member';
import { deleteProject } from '../fn/project/delete-project';
import { DeleteProject$Params } from '../fn/project/delete-project';
import { findAllProjects } from '../fn/project/find-all-projects';
import { FindAllProjects$Params } from '../fn/project/find-all-projects';
import { findAllProjectsByOwner } from '../fn/project/find-all-projects-by-owner';
import { FindAllProjectsByOwner$Params } from '../fn/project/find-all-projects-by-owner';
import { findProjectById } from '../fn/project/find-project-by-id';
import { FindProjectById$Params } from '../fn/project/find-project-by-id';
import { getMemberDetails } from '../fn/project/get-member-details';
import { GetMemberDetails$Params } from '../fn/project/get-member-details';
import { getMyProjects } from '../fn/project/get-my-projects';
import { GetMyProjects$Params } from '../fn/project/get-my-projects';
import { getProjectMembers } from '../fn/project/get-project-members';
import { GetProjectMembers$Params } from '../fn/project/get-project-members';
import { inviteMemberToProject } from '../fn/project/invite-member-to-project';
import { InviteMemberToProject$Params } from '../fn/project/invite-member-to-project';
import { PageResponseProjectResponse } from '../models/page-response-project-response';
import { ProjectResponse } from '../models/project-response';
import { saveProject } from '../fn/project/save-project';
import { SaveProject$Params } from '../fn/project/save-project';
import { updateMemberRole } from '../fn/project/update-member-role';
import { UpdateMemberRole$Params } from '../fn/project/update-member-role';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class ProjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMemberRole()` */
  static readonly UpdateMemberRolePath = '/api/projects/{projectId}/update-role';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMemberRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMemberRole$Response(params: UpdateMemberRole$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateMemberRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMemberRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMemberRole(params: UpdateMemberRole$Params, context?: HttpContext): Observable<string> {
    return this.updateMemberRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `saveProject()` */
  static readonly SaveProjectPath = '/api/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveProject$Response(params: SaveProject$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveProject(params: SaveProject$Params, context?: HttpContext): Observable<number> {
    return this.saveProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `inviteMemberToProject()` */
  static readonly InviteMemberToProjectPath = '/api/projects/{projectId}/invite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inviteMemberToProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteMemberToProject$Response(params: InviteMemberToProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectResponse>> {
    return inviteMemberToProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inviteMemberToProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteMemberToProject(params: InviteMemberToProject$Params, context?: HttpContext): Observable<ProjectResponse> {
    return this.inviteMemberToProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectResponse>): ProjectResponse => r.body)
    );
  }

  /** Path part for operation `assignRoleToMember()` */
  static readonly AssignRoleToMemberPath = '/api/projects/{projectId}/assign-role';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignRoleToMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignRoleToMember$Response(params: AssignRoleToMember$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return assignRoleToMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignRoleToMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignRoleToMember(params: AssignRoleToMember$Params, context?: HttpContext): Observable<string> {
    return this.assignRoleToMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getProjectMembers()` */
  static readonly GetProjectMembersPath = '/api/projects/{projectId}/members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectMembers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectMembers$Response(params: GetProjectMembers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getProjectMembers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectMembers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectMembers(params: GetProjectMembers$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getProjectMembers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `getMemberDetails()` */
  static readonly GetMemberDetailsPath = '/api/projects/{projectId}/member-details';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMemberDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberDetails$Response(params: GetMemberDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getMemberDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMemberDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberDetails(params: GetMemberDetails$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getMemberDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `findProjectById()` */
  static readonly FindProjectByIdPath = '/api/projects/{project-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findProjectById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProjectById$Response(params: FindProjectById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectResponse>> {
    return findProjectById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findProjectById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProjectById(params: FindProjectById$Params, context?: HttpContext): Observable<ProjectResponse> {
    return this.findProjectById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectResponse>): ProjectResponse => r.body)
    );
  }

  /** Path part for operation `deleteProject()` */
  static readonly DeleteProjectPath = '/api/projects/{project-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject$Response(params: DeleteProject$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject(params: DeleteProject$Params, context?: HttpContext): Observable<string> {
    return this.deleteProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findAllProjectsByOwner()` */
  static readonly FindAllProjectsByOwnerPath = '/api/projects/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllProjectsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProjectsByOwner$Response(params?: FindAllProjectsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProjectResponse>> {
    return findAllProjectsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllProjectsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProjectsByOwner(params?: FindAllProjectsByOwner$Params, context?: HttpContext): Observable<PageResponseProjectResponse> {
    return this.findAllProjectsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProjectResponse>): PageResponseProjectResponse => r.body)
    );
  }

  /** Path part for operation `getMyProjects()` */
  static readonly GetMyProjectsPath = '/api/projects/my-projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProjects$Response(params?: GetMyProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getMyProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProjects(params?: GetMyProjects$Params, context?: HttpContext): Observable<{
}> {
    return this.getMyProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAllProjects()` */
  static readonly FindAllProjectsPath = '/api/projects/all-Projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProjects$Response(params?: FindAllProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProjectResponse>> {
    return findAllProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProjects(params?: FindAllProjects$Params, context?: HttpContext): Observable<PageResponseProjectResponse> {
    return this.findAllProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProjectResponse>): PageResponseProjectResponse => r.body)
    );
  }

}
