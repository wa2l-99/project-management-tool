/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignTaskToMember } from '../fn/task/assign-task-to-member';
import { AssignTaskToMember$Params } from '../fn/task/assign-task-to-member';
import { createTask } from '../fn/task/create-task';
import { CreateTask$Params } from '../fn/task/create-task';
import { deleteTask } from '../fn/task/delete-task';
import { DeleteTask$Params } from '../fn/task/delete-task';
import { findAllTasksByProject } from '../fn/task/find-all-tasks-by-project';
import { FindAllTasksByProject$Params } from '../fn/task/find-all-tasks-by-project';
import { getTaskById } from '../fn/task/get-task-by-id';
import { GetTaskById$Params } from '../fn/task/get-task-by-id';
import { getTaskModificationsForUserProjects } from '../fn/task/get-task-modifications-for-user-projects';
import { GetTaskModificationsForUserProjects$Params } from '../fn/task/get-task-modifications-for-user-projects';
import { getTasksByPriority } from '../fn/task/get-tasks-by-priority';
import { GetTasksByPriority$Params } from '../fn/task/get-tasks-by-priority';
import { getTasksByStatus } from '../fn/task/get-tasks-by-status';
import { GetTasksByStatus$Params } from '../fn/task/get-tasks-by-status';
import { TaskHistoryResponse } from '../models/task-history-response';
import { TaskResponse } from '../models/task-response';
import { updateTask } from '../fn/task/update-task';
import { UpdateTask$Params } from '../fn/task/update-task';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTaskById()` */
  static readonly GetTaskByIdPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return getTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.getTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<string> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `assignTaskToMember()` */
  static readonly AssignTaskToMemberPath = '/api/tasks/{taskId}/assign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTaskToMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTaskToMember$Response(params: AssignTaskToMember$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return assignTaskToMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTaskToMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTaskToMember(params: AssignTaskToMember$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.assignTaskToMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/api/tasks/projectId={projectId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `findAllTasksByProject()` */
  static readonly FindAllTasksByProjectPath = '/api/tasks/projectId={projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTasksByProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTasksByProject$Response(params: FindAllTasksByProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskResponse>>> {
    return findAllTasksByProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTasksByProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTasksByProject(params: FindAllTasksByProject$Params, context?: HttpContext): Observable<Array<TaskResponse>> {
    return this.findAllTasksByProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskResponse>>): Array<TaskResponse> => r.body)
    );
  }

  /** Path part for operation `getTasksByStatus()` */
  static readonly GetTasksByStatusPath = '/api/tasks/projectId={projectId}/tasksByStatus';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByStatus$Response(params: GetTasksByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskResponse>>> {
    return getTasksByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByStatus(params: GetTasksByStatus$Params, context?: HttpContext): Observable<Array<TaskResponse>> {
    return this.getTasksByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskResponse>>): Array<TaskResponse> => r.body)
    );
  }

  /** Path part for operation `getTasksByPriority()` */
  static readonly GetTasksByPriorityPath = '/api/tasks/projectId={projectId}/tasksByPriority';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByPriority()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByPriority$Response(params: GetTasksByPriority$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskResponse>>> {
    return getTasksByPriority(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByPriority$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByPriority(params: GetTasksByPriority$Params, context?: HttpContext): Observable<Array<TaskResponse>> {
    return this.getTasksByPriority$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskResponse>>): Array<TaskResponse> => r.body)
    );
  }

  /** Path part for operation `getTaskModificationsForUserProjects()` */
  static readonly GetTaskModificationsForUserProjectsPath = '/api/tasks/my-projects/history';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskModificationsForUserProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskModificationsForUserProjects$Response(params?: GetTaskModificationsForUserProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskHistoryResponse>>> {
    return getTaskModificationsForUserProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskModificationsForUserProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskModificationsForUserProjects(params?: GetTaskModificationsForUserProjects$Params, context?: HttpContext): Observable<Array<TaskHistoryResponse>> {
    return this.getTaskModificationsForUserProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskHistoryResponse>>): Array<TaskHistoryResponse> => r.body)
    );
  }

}
