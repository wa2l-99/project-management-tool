name: Project-management-tool Backend Pipeline

# Déclenchement du workflow sur push ou pull request
on:
  push:
    branches:
      - '*'
    paths:
      - 'project-management-backend/**' # Lorsque des fichiers dans le répertoire 'services' changent
      - 'docker-compose.yml' # Lorsque 'docker-compose.yml' change
      - '.github/workflows/*-backend.yml'  # Lorsque les fichiers YAML de workflow backend changent
      - 'docker/backend/**'
jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      # Extraction du code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Verify Backend Files
        run: ls -l project-management-backend

      # Configuration de JDK 17 pour la compilation
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      # Compilation du projet
      - name: Compile project
        run: |
          cd project-management-backend
          chmod +x mvnw
          ./mvnw clean compile

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit tests
    needs: compile # Exécuter après le job 'compile'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Récupère tout l'historique Git
          submodules: recursive

      # Configuration de JDK 17 pour les tests
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      # Exécution des tests unitaires du projet
      - name: Run Unit Tests and Generate Coverage Report
        run: |
          cd project-management-backend
          chmod +x mvnw
          ./mvnw clean test verify

      # Publier les rapports de couverture comme artefacts
      - name: Upload Jacoco Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-coverage-report
          path: project-management-backend/target/site/jacoco/

  build:
    runs-on: ubuntu-latest
    name: Build backend
    needs: [compile, unit-tests] # Exécuter après les jobs 'compile' et 'unit-tests'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Configuration de JDK 17 pour la construction
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      # Construction du projet
      - name: Build project
        run: |
          cd project-management-backend
          chmod +x mvnw
          ./mvnw clean package

  build-image-and-deploy:
    runs-on: ubuntu-latest
    name: Build Docker image
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Initialize and Update Submodules
        run: git submodule update --init --recursive

      - name: Verify Backend Submodule
        run: |
          ls -l project-management-backend
          ls -l project-management-backend/src || echo "Src folder not found"
          ls -l project-management-backend/pom.xml || echo "Pom.xml not found"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Prepare Docker Build Context
        run: |
          mkdir -p docker-build-context/project-management-backend
          cp -R project-management-backend/* docker-build-context/project-management-backend

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Construction et push image backend
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: docker-build-context
          file: docker/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pmt-api:latest
          build-args:
            APP_VERSION=1.0.0
